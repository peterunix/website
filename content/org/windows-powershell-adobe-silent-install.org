* Windows Powershell Adobe Reader 32bit Silent Installer
** How it works 
- Download the Adobe Enterprise Installer
- Use 7z portable to extract the installer.exe file to a folder
- Parse the DC Release Notes page to pull the latest patch file
- Modify the setup.ini file to have it use our new patch file
- Run the setup.exe file with flags to silent install

The Adobe Reader Enterprise installer essentially a zip file with an old release of Adobe, along with a patch file that'll update Adobe to the most recent release.
Inside the extracted adobe.exe file is a setup.exe and a setup.ini.
The setup.ini file has a line that indicates which patch file the setup.exe file should use.

The script downloads Adobe using a hardcoded link.
It extracts it and scrapes the DC Release Notes page to download the most recent patch file, recreates the setup.ini to use the downloaded patch, and finally runs the setup.exe silently.

This disables all forms of Adobe updates.
Remove _AdobeSettings from the last line to suppress this function.

** The script
Download [[/content/files/Utilities/7za.exe][7za.exe]] and [[/content/files/Utilities/7za.dll][7za.dll]] and place them in the same directory as the script.
Those files will be used for extracting the adobe.exe file.

#+begin_src shell
$temp="C:\Windows\Temp"

# Fetch the uninstall string for adobe
function _UninstallAdobe{
    # Fetch the registry keys for all installed programs
    $progs=Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall, HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall | Get-ItemProperty
    # Uninstalling Adobe silently
    try{
    	# Fetch the uninstall string for Adobe and grab the product id of the program
        (($progs | Where {$_.displayname -match "Adobe Acrobat.*DC"}).uninstallstring) -match "{.*.}" | Out-Null
        Start-Process "msiexec.exe" -ArgumentList "/X $($matches[0]) /qn" -Wait
    } catch {
        "Couldn't detect a previous install of Adobe Acrobat Reader."
    }
}

function _InstallAdobe{
    # Downloading an outdated version of Adobe as a base for the patch
    Write-Host "Downloading Adobe Base"
    Invoke-WebRequest -Uri 'https://ardownload2.adobe.com/pub/adobe/reader/win/AcrobatDC/2200120085/AcroRdrDC2200120085_en_US.exe' -OutFile "$temp\adobereader.exe" -UseBasicParsing
    Write-Host "Extracting Adobe"
    Start-Process "$cwd\7za.exe" -ArgumentList "x $temp\adobereader.exe -o$temp\AdobeReaderExtracted -aoa" -Wait

    # Scrapes the DC Release Notes page and selects the link that contains all patches
    # for the current month
    Write-Host "Locating the latest Adobe patch file for this month"
    $base="https://www.adobe.com/devnet-docs/acrobatetk/tools/ReleaseNotesDC/"
    $link=(Invoke-WebRequest -Uri "https://www.adobe.com/devnet-docs/acrobatetk/tools/ReleaseNotesDC/index.html" -UseBasicParsing).links.href | Select-String "continuous/dccontinuous" | Select -First 1
    $link = $base+$link

    Write-Host "Downloading the latest Adobe patch file."
    # After finding the patch notes for the month, let's scrape the webpage for the latest patch file
    $patchlink=(Invoke-WebRequest -Uri "$link" -UseBasicParsing).links.href | Select-String "pub/adobe/reader/win/AcrobatDC/" | Select -First 1
    # Get the filename from the url
    $filename=([uri]"$patchlink").Segments[-1]
    # Download the patch.msp
    Invoke-WebRequest -Uri "$patchlink" -OutFile "$filename" -UseBasicParsing

# Create a new setup.ini file and have it point to the latest patch file
# Yes, this ugly indentation is necessary.
$Setup_INI_Content = @"
[Startup]
RequireMSI=3.0

[Product]
PATCH=$filename
msi=AcroRead.msi
"@

    Write-Host "Creating a new setup.ini for the Adobe installer. This will install the latest patch"
    $Setup_INI_Content | Set-Content "$temp\AdobeReaderExtracted\setup.ini"
    Write-Host "Starting the installation"
    Start-Process "$temp\AdobeReaderExtracted\setup.exe" -ArgumentList "/sAll" -Wait
}

function _AdobeSettings{
    Write-Host "Disabling the update task, update services, and update registry keys"
    # Prevent autoupdates (not necessary with the enterprise edition)
    Disable-ScheduledTask -TaskName "Adobe Acrobat Update Task"
    Stop-Service -Name "Adobe Acrobat Update Service"
    Set-Service -Name "AdobeARMservice" -StartupType Disabled
    # Disables and locks down the update button
    New-Item "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC" -ErrorAction SilentlyContinue
    New-Item "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown" -ErrorAction SilentlyContinue
    New-ItemProperty "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown" -Name "Mode" -Value 0 -PropertyType DWORD -Force
    New-ItemProperty "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown" -Name "bUpdater" -Value 0 -PropertyType DWORD -Force
    New-ItemProperty "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown" -Name "bProtectedModeValue" -Value 0 -PropertyType DWORD -Force
    # This *should* disable enhanced security mode
    New-ItemProperty "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown" -Name "bEnhancedSecurityStandalone" -Value 0 -PropertyType DWORD -Force
    New-ItemProperty "HKLM:\Software\WOW6432Node\Policies\Adobe\Acrobat Reader\DC\FeatureLockDown" -Name "bEnhancedSecurityInBrowser" -Value 0 -PropertyType DWORD -Force
}

_UninstallAdobe
_InstallAdobe
_AdobeSettings
#+end_src

** Usage
This integrates well with Datto RMM.

#+begin_src shell
./script.ps1
#+end_src

