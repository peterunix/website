* # Chrooting into systems with different architectures
** ## Preface
Full disk images contain the bootloader and partition table.
To mount an image file, we specify a /byte offset/ that points to the beginning of our linux partition.

** ## Mounting the image
Run /fdisk -l file.img/.
#+begin_src shell
[...]
Units: sectors of 1 * 512 = 512 bytes
[...]

Device                                    Boot  Start     End Sectors  Size Id Type
2021-05-07-raspios-buster-armhf-lite.img1        8192  532479  524288  256M  c W95 FAT32 (LBA)
2021-05-07-raspios-buster-armhf-lite.img2      532480 3661823 3129344  1.5G 83 Linux
#+end_src

I'm using the bash to multiply my start sector by my sector size. 

#+begin_src shell
mount -o loop,offset=$((512*532480)),rw ~/2021-05-07-raspios-buster-armhf-lite.img /mnt
#+end_src

*-o* Pass options to mount

*loop* Creates a psuedo block device to mount the image file to

*offset=$((512*532480))* Sets the offset to the sum of 512*startSector

*rw* Enables reading and writing to the mountpoint

** ## Chrooting
You'll need to install the qemu-user-static package for your distribution.
After it's installed, you can copy the /usr/bin/qemu-*-static binary into the bin folder of our mounted image file.
I'm chrooting into an ARM image so I'll use the binary for ARM.

#+begin_src shell
paru -S --noconfirm qemu-user-static-bin arch-install-scripts

cp /usr/bin/qemu-arm-static /mnt/usr/bin
arch-chroot /mnt/ qemu-arm-static /bin/bash
#+end_src
