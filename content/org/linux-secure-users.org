* Securing remote users
** Preface
A general guide on securing remote user accounts. Here's the
rundown:

Generate SSH keys for secure authentication

Restrict user command access

Changing user shell

** SSH keys
Using key based authentication over password based authentication completely eliminates attackers from being able to remotely log into our machine over ssh.
SSH keys will require the individual to have access to the generated key file in order to login.
A long and complicated password is also sufficient security-wise.
I recommened using a passphrase of several random words strung together.

** SSH key generation
This command will generate two files. An ssh public key and an ssh private key.
We'll upload the public key to our server and then login using our private key.
By default, this command generates the keys in the "~/.ssh/" directory.

#+begin_src
# Generating the key pair
ssh-keygen -t rsa  -b 4096

# Copying the public key file
ssh-copy-id -i /path/to/idrsa.pub user@10.0.0.1

# Verifying it works
ssh -i /path/to/idrsa user@10.0.0.1
user> echo "IT WORKS!!!"
#+end_src

We also want to disable password based authentication in our ssh config

#+begin_src
vim /etc/ssh/sshd_config
# Add/modify the lines
PermitRootLogin no
PubkeyAuthentication yes
PasswordAuthentication no

systemctl restart sshd
#+end_src

Add the following if you only want to allow a ssh access to a specific user:

#+begin_src
AllowUsers username
#+end_src

** Restrict user commands

In the event that an attacker gains access to our user account, we want to restrict any possible vulnerabilities that could lead to privledge escalation.
Since we generally only work as a root user when configuring our servers, we'll only allow our user access to the "su" command and nothing more.
We'll create a bash profile and change the user's path variable. We'll restrict it permitting read and execute permissions.

#+begin_src
cd /home/user
mkdir programs
export PATH=~/programs /user/home/.bashrc

# Symbolically linking our program
ln -s /usr/bin/su /home/user/programs/

# Giving the user only read and execute permissions on the newly create files
chown -R root:user programs .bash_profile
chmod -R 0750 programs .bash_profile
#+end_src

Now you're restricted to only using the "su" command when logging into the user.

** Changing shell
Depending on your use case, it is also beneficial to change the users shell.
You can change the shell to something like "/sbin/nologin" to disable logins, or rbash.
Rbash stands for "restricted bash".
In a nutshell, it's bash with restricted shell functions.

#+begin_src
usermod -s /usr/bin/rbash user
#+end_src
